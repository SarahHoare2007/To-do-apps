{"ast":null,"code":"var _jsxFileName = \"/Users/GDES/Documents/Sarah Hoare/todoreact/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport './App.css';\nimport { TextField, Grid, Button } from \"@mui/material\";\nimport styled from \"@emotion/styled\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [taskName, setTaskName] = useState(\"\");\n  const [tasks, setTasks] = useState([]);\n  const valueChange = event => {\n    console.log(event);\n    const newValue = event.target.value;\n    setTaskName(newValue);\n  };\n  const handleAddTask = (e, task) => {\n    e.preventDefault();\n    const newTasks = [...tasks];\n    newTasks.unshift({\n      id: task.length,\n      name: task\n    });\n    setTasks(newTasks);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"todo-app\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          justifyContent: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              type: \"text\",\n              id: \"new-task\",\n              placeholder: \"Enter a new task\",\n              value: taskName,\n              onChange: valueChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 24\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: [/*#__PURE__*/_jsxDEV(StyledButton, {\n              size: \"large\",\n              id: \"add-task\",\n              varient: \"outline\",\n              onClick: e => handleAddTask(e, taskName),\n              children: \"create task\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 24\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          id: \"task-list\",\n          children: tasks.map((task, index) => {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: task.name\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"3nmx8SuzHBNDtG/5+2eRP6qIdRQ=\");\n_c = App;\nexport default App;\nconst StyledButton = styled(Button)`\nborder: 5px red;\n`;\n_c2 = StyledButton;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"StyledButton\");","map":{"version":3,"names":["useState","TextField","Grid","Button","styled","jsxDEV","_jsxDEV","App","_s","taskName","setTaskName","tasks","setTasks","valueChange","event","console","log","newValue","target","value","handleAddTask","e","task","preventDefault","newTasks","unshift","id","length","name","className","children","container","justifyContent","item","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","StyledButton","size","varient","onClick","map","index","_c","_c2","$RefreshReg$"],"sources":["/Users/GDES/Documents/Sarah Hoare/todoreact/src/App.js"],"sourcesContent":["import { useState } from \"react\";\nimport './App.css'\nimport { TextField, Grid, Button } from \"@mui/material\";\nimport styled from \"@emotion/styled\";\n\n\nfunction App() {\n  const [taskName, setTaskName] = useState(\"\");\n  const [tasks, setTasks] = useState([])\n\n  const valueChange = (event) => {\n    console.log(event);\n    const newValue = event.target.value;\n    setTaskName(newValue);\n  }\n\n  const handleAddTask = (e, task) => {\n    e.preventDefault();\n    const newTasks = [...tasks];\n\n    newTasks.unshift({\n      id: task.length,\n      name: task,\n    });\n    setTasks(newTasks);\n  }\n\n\n  return (\n    <div className=\"App\">\n      <div id=\"todo-app\">\n        <form>\n          <Grid container justifyContent={\"center\"}>\n            <Grid item><TextField type=\"text\" id=\"new-task\"\n              placeholder=\"Enter a new task\" value={taskName} onChange={valueChange} /> </Grid>\n            <Grid item><StyledButton\n              size=\"large\"\n              id=\"add-task\"\n              varient=\"outline\"\n              onClick={(e) => handleAddTask(e, taskName)}>\n              create task</StyledButton> </Grid>\n          </Grid>\n\n\n\n          <ul id=\"task-list\">\n            {tasks.map((task, index) => {\n              return (\n                <li key={index}>{task.name}</li>\n              )\n            })}\n          </ul>\n        </form>\n      </div>\n    </div >\n  );\n}\n\nexport default App;\nconst StyledButton = styled(Button)`\nborder: 5px red;\n`;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}